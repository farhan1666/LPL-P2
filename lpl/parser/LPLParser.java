/* Generated By:JavaCC: Do not edit this line. LPLParser.java */
  package lpl.parser;

  import lpl.ast.*;
  import java.util.List;
  import java.util.LinkedList;

  public class LPLParser implements LPLParserConstants {

  final public Program nt_Program() throws ParseException {
  FunDef mainDef, fd;
  List<FunDef> fds = new LinkedList<FunDef>();
    mainDef = nt_FunDef();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fd = nt_FunDef();
                                        fds.add(fd);
    }
    jj_consume_token(0);
    {if (true) return new Program(mainDef, fds);}
    throw new Error("Missing return statement in function");
  }

  final public FunDef nt_FunDef() throws ParseException {
    jj_consume_token(DEF);
    nt_Type();
    jj_consume_token(ID);
    jj_consume_token(LBR);
    nt_FormalList();
    jj_consume_token(RBR);
    jj_consume_token(LCBR);
    nt_VarDecl();
    jj_consume_token(RCBR);
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public List<Formal> nt_FormalList() throws ParseException {
  Formal f;
  List<Formal> fs = new LinkedList<Formal>();
  Type type;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      type = nt_Type();
      t = jj_consume_token(ID);
      f = new Formal(type, t.image); fs.add(f);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        f = nt_FormalRest();
                         fs.add(f);
      }
      {if (true) return fs;}
      break;
    default:
      jj_la1[2] = jj_gen;

      {if (true) return fs;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Formal nt_FormalRest() throws ParseException {
    jj_consume_token(COMMA);
    nt_Type();
    jj_consume_token(ID);
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Type nt_Type() throws ParseException {
    jj_consume_token(INT);
      {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl nt_VarDecl() throws ParseException {
    nt_Type();
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
                               {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Stm nt_Statement() throws ParseException {
    jj_consume_token(LCBR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCBR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      nt_Statement();
    }
    jj_consume_token(RCBR);
                                        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_Exp() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(LBR);
    nt_ExpList();
    jj_consume_token(RBR);
                                    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Op nt_Op() throws ParseException {
    jj_consume_token(AND);
           {if (true) return Op.AND;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExp nt_PrimaryExp() throws ParseException {
    jj_consume_token(TRUE);
             {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public List<Exp> nt_ExpList() throws ParseException {
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_ExpRest() throws ParseException {
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public LPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x800000,0x8000000,0x400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LPLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LPLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LPLParser(LPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    // JavaCC will generate the body of this class
  }
